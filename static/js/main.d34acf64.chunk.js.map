{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","generateQuote","chosenQuote","quotes","state","apiResult","randomNumber","Math","floor","random","length","forEach","element","index","push","setState","text","quote","author","isLoaded","bgColor","clickCount","handleClick","bind","this","fetch","headers","Accept","then","response","json","responseData","quotesArrayLength","catch","error","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOA0EeA,G,wDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmCRC,cAAgB,WACd,IAAMC,EAAc,GACdC,EAAS,EAAKC,MAAMC,UACtBC,EAAeC,KAAKC,MAAOD,KAAKE,SAAW,EAAKL,MAAMC,UAAUK,OAAU,GAE9EP,EAAOQ,SAAQ,SAASC,EAASC,GAC5BA,IAAUP,GACXJ,EAAYY,KAAKF,MAGrB,EAAKG,SAAS,CACZC,KAAKd,EAAY,GAAGe,MACpBC,OAAOhB,EAAY,GAAGgB,UA9CxB,EAAKd,MAAQ,CACXC,UAAW,KACXa,OAAQ,GACRF,KAAM,GACNG,UAAU,EACVC,QAAS,UACTC,WAAY,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAVF,E,0DAcjBC,KAAKvB,kB,0CAGc,IAAD,OAClBwB,MAAM,yIAA0I,CAC9IC,QAAS,CACPC,OAAQ,sBAGXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,EAAKhB,SAAS,CACZV,UAAW0B,EAAa5B,OACxBgB,UAAU,EACVD,OAAQa,EAAa5B,OAAO,GAAGe,OAC/BF,KAAMe,EAAa5B,OAAO,GAAGc,MAC7Be,kBAAmBD,EAAa5B,OAAOO,YAG1CuB,OAAM,SAAAC,GAAK,OAAI,EAAKnB,SAAS,CAAEmB,e,+BAwBhC,OACE,yBAAKC,GAAG,QACN,wBAAIA,GAAG,SAAP,wBACA,yBAAKA,GAAG,aACN,uBAAGA,GAAG,QAAQX,KAAKpB,MAAMY,MACzB,uBAAGmB,GAAG,UAAN,MAAmBX,KAAKpB,MAAMc,QAC9B,4BAAQiB,GAAG,YAAYC,QAASZ,KAAKF,aAArC,mB,GAhEQe,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.d34acf64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResult: null,\n      author: '',\n      text: '',\n      isLoaded: false,\n      bgColor: '#f99192',\n      clickCount: 0,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.generateQuote();\n  }\n\n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json', {\n      headers: {\n        Accept: \"application/json\",\n      }\n    })\n    .then(response => response.json())\n    .then((responseData) => {\n      this.setState({\n        apiResult: responseData.quotes,\n        isLoaded: true,\n        author: responseData.quotes[0].author,\n        text: responseData.quotes[0].quote,\n        quotesArrayLength: responseData.quotes.length,\n      });\n    })\n    .catch(error => this.setState({ error }));\n  }\n\n  generateQuote = () => {\n    const chosenQuote = [];\n    const quotes = this.state.apiResult;\n    let randomNumber = Math.floor((Math.random() * this.state.apiResult.length) + 1);\n\n    quotes.forEach(function(element, index) {\n      if(index === randomNumber) {\n        chosenQuote.push(element)\n      }\n    })\n    this.setState({\n      text:chosenQuote[0].quote,\n      author:chosenQuote[0].author,\n    })\n  }\n\n \n\n  \n\n  render() {\n    return (\n      <div id=\"main\">\n        <h1 id=\"title\">Random Quote Machine</h1>\n        <div id=\"quote-box\">\n          <p id=\"text\">{this.state.text}</p>\n          <p id=\"author\"> - {this.state.author}</p>\n          <button id=\"new-quote\" onClick={this.handleClick}>New Quote</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}